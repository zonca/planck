import logging as l
import pycfitsio
import numpy as np

class DummyClass:
    pass
physcon = DummyClass()
physcon.c = 2.997924580000e+08

from dipole import SatelliteVelocity

import quaternionarray as qarray
import private
import glob

import utils
#from tabulate_corrections_calc import TabulatedAttitudeCorrections
#from IPython.Debugger import Tracer; debug_here = Tracer()

def arcmin2rad(ang):
    return np.radians(ang/60.)

def deaberration(vec, obt, coord):
    satvel = SatelliteVelocity(coord).orbital_v(obt)
    return np.cross(vec, np.cross(vec, satvel/physcon.c))

def simple_deaberration(vec, obt, coord):
    l.critical('Applying SIMPLE deaberration correction')
    satvel = SatelliteVelocity(coord, interp='linear').orbital_v(obt)
    return -1 * satvel/physcon.c

def get_wobble_psi2_maris(obt):
    TAC=TabulatedAttitudeCorrections(private.WOBBLE['sun_file'],private.WOBBLE['planck_file'])
    return np.radians(
                TAC.TabulatePsi2(obt*2**16) /60.
            )

def get_wobble_psi2(obt, filename=None):
    """Reads psi2 wobble angle from file generated by Michele's standalone code"""
    if filename is None:
        filename = private.WOBBLE['psi2_file']

    w = np.loadtxt(filename, delimiter=',', skiprows=1)

    return np.radians(
                np.interp(obt, w[:,1]/2**16, w[:,2])/60.
            )

def wobble(obt, wobble_psi2_model=get_wobble_psi2_maris, offset=0):
    """Gets array of OBT and returns an array of quaternions"""

    R_psi1 = qarray.inv(qarray.rotation([0,0,1], private.WOBBLE_DX7['psi1_ref']))
    R_psi2 = qarray.inv(qarray.rotation([0,1,0], private.WOBBLE_DX7['psi2_ref']))

    psi2 = wobble_psi2_model(obt) - offset
    R_psi2T = qarray.rotation([0,1,0], psi2)

    wobble_rotation = qarray.mult(qarray.inv(R_psi1),
                            qarray.mult(R_psi2T , 
                                qarray.mult(R_psi2 , R_psi1)
                            )
                        )

    #debug_here()
    return wobble_rotation

def ahf_wobble(obt):
    """Pointing period by pointing period correction for psi1 and psi2 from
    the AHF observation files"""

    R_psi1 = qarray.inv(qarray.rotation([0,0,1], private.WOBBLE['psi1_ref']))
    R_psi2 = qarray.inv(qarray.rotation([0,1,0], private.WOBBLE['psi2_ref']))

    psi1, psi2 = get_ahf_wobble(obt)

    R_psi2T = qarray.rotation([0,1,0], psi2)
    R_psi1T = qarray.rotation([0,0,1], psi1)

    wobble_rotation = qarray.mult(R_psi1T,
                            qarray.mult(R_psi2T , 
                                qarray.mult(R_psi2 , R_psi1)
                            )
                        )

    return wobble_rotation


def get_ahf_wobble(obtx):
    """Read psi1 and psi2 file previously extracted from observation AHF files"""
    filename = sorted(glob.glob('/project/projectdirs/planck/user/seiffert/cal/WDX9/*.fits'))[-1]
    l.info(filename)
    with pycfitsio.open(filename) as fitsfile:
        obt = fitsfile['OBT'].read_column(0)/2.**16 + 20 #shift forward of 20 seconds, so that the abrupt change in wobble angle is within the manouvre and does not impact the pointing between the last AHF quaternion and the manouvre
        psi1 = arcmin2rad(fitsfile['PSI_1'].read_column(0))
        psi2 = arcmin2rad(fitsfile['PSI_2'].read_column(0))
        # reproduce dpc dx9
        #psi1[1:] = psi1[0:-1]
        #psi2[1:] = psi2[0:-1]
    i_interp = np.interp(obtx, obt, np.arange(len(obt)))
    i_rounded = np.floor(i_interp).astype(np.int)
    return psi1[i_rounded], psi2[i_rounded]
    #return np.interp(obtx, obt, psi1), np.interp(obtx, obt, psi2)

def read_ptcor(obt, ptcorfile):
    data = np.loadtxt(ptcorfile, delimiter=',')
    l.debug('Reading ' + ptcorfile)
    i = data[:, 0].searchsorted(np.median(obt))
    return data[i-1, 1], data[i-1, 2]
    #return utils.interp_floor(obt, data[:,0], data[:,1]), utils.interp_floor(obt, data[:,0], data[:,2])

def ptcor(obt, ptcorfile):
    # Boresight rotation of 85 degrees in order to get in inscan-xscan reference frame
    q_str_LOS = qarray.rotation(np.array([0,1,0]), np.radians(90-85))

    # read variable correction for current OD from file
    delta_inscan, delta_xscan = read_ptcor(obt, ptcorfile)

    # rotation in inscan-xscan reference frame
    qcor = qarray.mult(
            qarray.rotation(np.array([0,1,0]), delta_xscan),
            qarray.rotation(np.array([1,0,0]), delta_inscan)
            )

    qcor_tot = qarray.mult(q_str_LOS, qarray.mult(qcor, qarray.inv(q_str_LOS)))
    return qcor_tot
